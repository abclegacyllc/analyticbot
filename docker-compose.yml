version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres-init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  redis:
    image: redis:7.0
    ports:
      - "6379:6379"

  bot:
    build: .
    command: python run_bot.py
    volumes:
      - .:/app
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ADMIN_IDS=${ADMIN_IDS}
      - TWA_HOST_URL=${TWA_HOST_URL}
      - WEBHOOK_HOST=${WEBHOOK_HOST}
      - WEB_SERVER_HOST=${WEB_SERVER_HOST}
      - WEB_SERVER_PORT=${WEB_SERVER_PORT}
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis

  api:
      build: .
      command: uvicorn api:app --host 0.0.0.0 --port 8000
      volumes:
        - .:/app
      environment:
        - DB_USER=${POSTGRES_USER}
        - DB_PASS=${POSTGRES_PASSWORD}
        - DB_HOST=db
        - DB_PORT=5432
        - DB_NAME=${POSTGRES_DB}
      ports:
        - "8000:8000"
      depends_on:
        - db

  celery_worker:
    build: .
    command: celery -A src.bot.celery_app worker -l info
    volumes:
      - .:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - BOT_TOKEN=${BOT_TOKEN}
    depends_on:
      - redis
      - db
  
  celery_beat:
    build: .
    command: celery -A src.bot.celery_app beat -l info
    volumes:
      - .:/app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis

  twa-frontend:
    build:
      context: ./twa-frontend
      dockerfile: Dockerfile
    ports:
      - "5173:80"

volumes:
  postgres_data:
